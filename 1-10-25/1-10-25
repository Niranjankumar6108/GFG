//{ Driver Code Starts
import java.util.*;

class Find_Given_Element_Of_Spiral_Matrix 
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t > 0)
		{
			int n = sc.nextInt();
			int m = sc.nextInt();
			int k = sc.nextInt();
			int arr[][] = new int[n][m];
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<m; j++ )
				{
					arr[i][j] = sc.nextInt();
				}
			}
			Solution obj = new Solution();
			System.out.println(obj.findK(arr, n, m, k));
		t--;
		
System.out.println("~");
}
	}
}
// } Driver Code Ends


//User function Template for Java

class Solution{
    public int findK(int a[][], int n, int m, int k) {
        int minr = 0; // Top row
        int maxr = n - 1; // Bottom row
        int minc = 0; // Left column
        int maxc = m - 1; // Right column
        
        int count = 0; // To track the element position in spiral order

        while (minr <= maxr && minc <= maxc) {
            // Traverse from left to right in the current top row
            for (int j = minc; j <= maxc; j++) {
                count++;
                if (count == k) {
                    return a[minr][j];
                }
            }
            minr++;

            // Traverse from top to bottom in the current right column
            for (int i = minr; i <= maxr; i++) {
                count++;
                if (count == k) {
                    return a[i][maxc];
                }
            }
            maxc--;

            // Traverse from right to left in the current bottom row (if rows remain)
            if (minr <= maxr) {
                for (int j = maxc; j >= minc; j--) {
                    count++;
                    if (count == k) {
                        return a[maxr][j];
                    }
                }
                maxr--;
            }

            // Traverse from bottom to top in the current left column (if columns remain)
            if (minc <= maxc) {
                for (int i = maxr; i >= minr; i--) {
                    count++;
                    if (count == k) {
                        return a[i][minc];
                    }
                }
                minc++;
            }
        }

        // If k is greater than the total number of elements in the matrix
        return -1;
    }
}
